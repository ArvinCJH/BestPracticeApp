package com.liyafeng.practice;

/**
 * Created by liyafeng on 16/11/2017.
 */

public class Algorithm {


    /**
     * 几种排序比较？
     */
    void a1(){

    }

    /**
     * 快速排序 quick 的原理？
     * ==========
     * 快速排序，思想是切分（partition），取第一个元素k，两个指针，i ,j 指向第二个元素和尾元素
     * i找到第一个比k大的，j找到第一个比k小的，交换，直到j < i ，最后交换k 和 j
     *
     * 如此反复
     * ==========
     * 改进，在小数组中改用插入排序，小数组插入排序比快速排序要快，因为快排的递归需要调用自己
     *
     *
     */
    void a1_1(){

    }



    /**
     * 插入排序 insertion 和希尔排序 shell 区别？
     * ======
     * 区别：
     * 希尔排序是改进版的插入排序
     * 插入排序每次选取剩余数组的第一个元素，插入到排序好的数组中，但是如果数组很大
     * 假如最后一个元素是最小的，那么他将要和左边排序好的所有元素比较后才能移动到最左边
     * 希尔排序则可以将数组大体排序好（h有序的），这样最后一次完全的插入排序时
     * 数组中元素的比较次数减少了。
     *
     * 时间复杂度insertion O(n^2) shell大约为O(n^3/2)
     * ==============
     * 希尔原理：
     * h   遍历顺序h/3...13 ,4 ,1     h取值范围 3h+1...1 (3h+1<n)
     *
     * 从第h个元素开始遍历剩下所以的元素，每隔h个数字组成一个数组进行插入排序
     *
     * 当前的j和前j-h（j>h）的数字比较，小的插入前面
     *
     *
     *
     * ===============
     * 插入排序是从剩余数组中选第一个元素，插入前面到已经排序好的数组中
     *
     *
     * ============
     * insertion会比selection比较次数要少一些
     *
     */
    void a1_2(){

    }

    /**
     * 选择排序selection 和 冒泡排序bubble 区别？
     * ========
     * 选择排序是每次遍历剩余数组，找出最小的元素放在剩余数组的最前面
     * 冒泡排序是每次剩余数组中的元素两两比较，最小的元素会冒到剩余数组的最前面
     *
     * 两者时间复杂度都是O(n^2)，但是selection要比bubble快一些，因为选择排序的交换次数少
     *
     */
    void a1_3(){

    }


    /**
     * 归并排序 merge
     * =========
     * 分治思想的应用
     * 两个有序的小数组合并为一个有序的大数组
     * 优点是只需要O(NlogN)时间复杂度，缺点是需要一个辅助空间，和N成正比
     *
     * ===================
     * 重点是归并方法merge
     * a[] lo mid hi
     * lo - mid  mid -hi 的两段都是有序的
     *
     * =================
     * 改进，可以对小数组排序的时候改为插入排序，这样比纯归并快10%
     *
     */
    void a1_4(){

    }
    /**
     * 几种查找算法比较？
     * ===========
     * 二分法，红黑树，散列表（拉链法，线性探测法）
     */
    void a2(){

    }

    /**
     * 了解字符串操作？
     * ==============
     * 字符串匹配，字符串排序（低位优先的字符串排序，高位优先），（单词查找树）
     *
     */
    void a3(){

    }

    /**
     * 图的算法？
     * ===========
     * 最短路径，最小生成树，拓扑排序
     */
    void a4(){

    }


    /**
     * 数据编码（压缩）？
     */
    void a5(){

    }

}
